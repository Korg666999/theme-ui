// test('renders with styles', () => {
//   const json = renderJSON(
//     <ThemeProvider
//       theme={{
//         config: {
//           useCustomProperties: false,
//         },
//         styles: {
//           h1: {
//             color: 'tomato',
//           },
//         },
//       }}
//     >
//       {mdx('h1', null, 'Hello')}
//     </ThemeProvider>
//   )
//   expect(json).toHaveStyleRule('color', 'tomato')
//   expect(json).toMatchSnapshot()
// })

// test('renders with nested provider', async () => {
//   const tree = render(
//     <ThemeProvider
//       theme={{
//         config: {
//           useCustomProperties: false,
//         },
//         styles: {
//           h1: {
//             color: 'tomato',
//           },
//         },
//       }}
//     >
//       <ThemeProvider
//         theme={{
//           styles: {
//             h1: {
//               color: 'cyan',
//             },
//           },
//         }}
//       >
//         {mdx('h1', null, 'Hello')}
//       </ThemeProvider>
//     </ThemeProvider>
//   )

//   const style = global.getComputedStyle(await tree.findByText('Hello'))

//   expect(style.color).toBe('cyan')
// })

// test('renders with custom components', () => {
//   const h1 = (props: any) => <pre {...props} />

//   const json = renderJSON(
//     <ThemeProvider
//       components={{
//         h1,
//       }}
//       theme={{
//         config: {
//           useCustomProperties: false,
//         },
//         styles: {
//           h1: {
//             color: 'tomato',
//           },
//         },
//       }}
//     >
//       {mdx('h1', null, 'Hello')}
//     </ThemeProvider>
//   )
//   expect(json).toHaveStyleRule('color', 'tomato')
//   expect(json!.type).toBe('pre')
// })
